{
  _______________________________________________________________________________________________

                                           C F D W A R P

                               A CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          19mar08b
  Compiler                         gcc 5.4.0 20160609 with OPENMP threads
  Compiled on                      Mar  9 2019 at 12:13:15
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block ADI [1,2]
  EM Field Relaxation              None
  Convection Discretization        Reconstruction-Evolution MUSCL with flux FVS [3], FDS [5],
                                   and primitive interpolation TVD [4], WENO [7], CWENO [9],
                                   AOWENO [8], and eigenvalue conditioning HARTEN, GNOFFO [10],
                                   PECLET [11], PASCAL [6], and PARENT positivity-preserving
                                   filter [12]
  Temporal Discretization          Positivity-Preserving Cross-Difference Formula [6]
  Fluid Model                      Navier-Stokes Perfect Gas
  Thermodynamic Model              Perfect Gas
  Chemical Model                   Air 1 species 0 reaction
  EM Field Model                   None
  Beam Model                       None
  Number of Dimensions             3
  Number of Flux Components        5
  _______________________________________________________________________________________________

  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit
       Schemes", Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems
       in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [6]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [7]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [8]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [9]  M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [10] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [11] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [12] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equatons", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.


}

 
{
LES of a turbulent supersonic boundary layers

See: DNS of Effusion Cooling in a Supersonic Boundary-Layer Flow: Influence of Turbulence by Michael Keller and Markus J. Kloker, AIAA 2013-2897 
and DNS of a flat-plate supersonic boundary layer using the discontinuous Galerkin spectral element method by M. Atak, J. Larsson,  G. Gassner, C.-D. Munz, AIAA 2014-3078

}

freq=50000;{Hz}
poweradded=25; {W}

Minf=2.67;
Tinf=564; {K}
Pinf=14890; {Pa}
Twall=1242; {K}
Lref=24.77E-3; {m}
Lx=10.4*Lref;
Ly=0.93*Lref;
Lz=2*pi/21*Lref;
deltalam=0.025*Lref;
deltaturb=0.175*Lref;

mf=0.5;

is=1;
ie=round(550*mf);
js=1;
je=round(60*mf);
ks=1;
ke=round(40*mf);

TURB_js=js;
TURB_je=round(40*mf);
TURB_is=round(100*mf);
TURB_ie=ie;
TURB_ys=0;
TURB_ye=deltaturb*1.2;
TURB_xs=0.25*Lx;
TURB_xe=Lx;
TURB_dwall=5e-6/mf;

HEAT_is=round(30*mf);
HEAT_ie=round(50*mf);
HEAT_js=js;
HEAT_je=round(10*mf);
HEAT_ks=ks+round(10*mf);
HEAT_ke=ke-round(10*mf);
HEAT_xs=0.05*Lx;
HEAT_xe=0.12*Lx;
HEAT_ys=0.0;
HEAT_ye=deltalam/4;
HEAT_zs=Lz*(HEAT_ks-ks)/(ke-ks);
HEAT_ze=Lz*(HEAT_ke-ks)/(ke-ks);

Grid(
  Size(is,js,ks, ie,je,ke);

  {heat region}
  Corners    (HEAT_is,HEAT_js,HEAT_ks, HEAT_ie,HEAT_je,HEAT_ke, HEAT_xs,HEAT_ys,HEAT_zs,HEAT_xe,HEAT_ye,HEAT_ze);
  JoinCorners(HEAT_is,HEAT_js,HEAT_ks, HEAT_ie,HEAT_je,HEAT_ke,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);

  {between heat region and bdry height}
  Corners    (HEAT_is,HEAT_je,HEAT_ks,HEAT_ie,TURB_je,HEAT_ke, HEAT_xs,HEAT_ye,HEAT_zs,HEAT_xe,TURB_ye,HEAT_ze);
  JoinCorners(HEAT_is,HEAT_je,HEAT_ks,HEAT_ie,TURB_je,HEAT_ke,  EE,0.5e0,1.0e0,1.0e0,  GE,0.5e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);

  {between bdry height and top of domain}
  Corners    (HEAT_is,TURB_je,HEAT_ks, HEAT_ie,je,HEAT_ke, HEAT_xs,TURB_ye,HEAT_zs,HEAT_xe,Ly,HEAT_ze);
  JoinCorners(HEAT_is,TURB_je,HEAT_ks, HEAT_ie,je,HEAT_ke,  EE,0.5e0,1.0e0,1.0e0,  GE,0.8e0,1.0e0,1.0e0,  EE,0.5e0,1.0e0,1.0e0);

  {Region between HEAT_ke and ke}  
  Copy(HEAT_is,js,HEAT_ke, HEAT_ie,je,HEAT_ke, HEAT_is,js,ke);
  Translate(HEAT_is,js,ke,HEAT_ie,je,ke, 0,0,Lz-HEAT_ze);
  Join(HEAT_is,js,HEAT_ke,HEAT_ie,je,ke,k,GE,0.5,1.0,1.0);  

  {Region between ks and HEAT_ks}  
  Copy(HEAT_is,js,HEAT_ks, HEAT_ie,je,HEAT_ks, HEAT_is,js,ks);
  Translate(HEAT_is,js,ks,HEAT_ie,je,ks, 0,0,-HEAT_zs);
  Join(HEAT_is,js,ks,HEAT_ie,je,HEAT_ks,k,EG,0.5,1.0,1.0);  


  {Region between is and HEAT_is}
  Copy(HEAT_is,js,ks,HEAT_is,je,ke, is,js,ks);
  Translate(is,js,ks,is,je,ke,-HEAT_xs,0,0);
  Join(is,js,ks,HEAT_is,je,ke,i,EG,0.5,1,1);

  {Region between TURB_is and TURB_ie}
  Corners(TURB_is,TURB_js,ks,TURB_ie,TURB_je,ke, TURB_xs,TURB_ys,0,TURB_xe,TURB_ye,Lz);
  JoinCorners(TURB_is,TURB_js,ks,TURB_ie,TURB_je,ke,  EE,0.5,1,1, FE,0.2,TURB_dwall,1, EE,0.5,1,1);
  Corners(TURB_is,TURB_je,ks,TURB_ie,je,ke, TURB_xs,TURB_ye,0,TURB_xe,Ly,Lz);
  JoinCorners(TURB_is,TURB_je,ks,TURB_ie,je,ke,  EE,0.5,1,1, GE,0.8,1,1, EE,0.5,1,1);

  {Region between HEAT_ie and TURB_is}
  Join(HEAT_ie,js,ks, TURB_is,je,ke, i, GG, 0.5, 1,1);

{
  printf("\ndx in turb region =  %E m\n",_x(TURB_is+1,js,ks)-_x(TURB_is,js,ks));
  printf("dy in turb region =  %E m\n",_y(TURB_is+1,TURB_je,ks)-_y(TURB_is+1,TURB_je-1,ks));
  printf("dz in turb region =  %E m\n",_z(TURB_is+1,TURB_je,ks+1)-_z(TURB_is+1,TURB_je,ks));
}
);


Bdry(
  NavierStokesPerfect(
    {
    _________________________________________________________________________________________

    Boundary Condition Type    ID    Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC      0     Inflow, supersonic
    BDRY_OUTFLOWSUPERSONIC1    1     Outflow, supersonic, 1o
    BDRY_SYMMETRICAL1          2     Symmetrical, 1o
    BDRY_SYMMETRICAL2          3     Symmetrical, 2o
    BDRY_SYMMETRICAL3          8     Symmetrical, 3o
    BDRY_WALLTFIXED1           4     Wall, T specified, 1o
    BDRY_WALLTFIXED2           a     Wall, T specified, 2o
    BDRY_WALLADIABATIC1        5     Wall, adiabatic, 1o
    BDRY_WALLADIABATIC2        b     Wall, adiabatic, 2o
    BDRY_INFLOWSUBSONIC1       6     Subsonic Inflow 1o (Constant Tstag, Pstag at inflow)
    BDRY_OUTFLOWSUBSONIC1      7     Subsonic Outflow 1o (Constant P at outflow)
    BDRY_FREESTREAM1           9     Freestream, 1o, params Vx,Vy,Vz, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_OUTFLOWSUPERSONIC1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SYMMETRICAL2,BDRY_SYMMETRICAL2);
    for (i,is+1,ie-1,
      for (j,js+1,je-1,
        Link(i,j,ks+1,i,j,ke);
        Link(i,j,ks,i,j,ke-1);
      );
    );
    {
    Cut(is,js,ks,  ie,je,ke);
    Region(is,js,ks,  ie,je,ke,  BDRY_INFLOWSUPERSONIC);
    Link(i1,j1,k1,  i2,j2,k2);
    Param(is,js,ks,  ie,je,ke,  BDRY_FREESTREAM1, Vx,Vy,Vz,P,T);
    }
  );
);
 
 
Model(
  NavierStokesPerfect(
    gamma=1.4;
    R=286.0;        {J/kgK }
    eta=2.8e-5;       {kg/ms}
    kappa=0.044;     {W/mK}
    Pmin=1.0e-2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e1;     Tmax=6.0e3;    {K}
    SetBodyForce(is,js,ks, ie,je,ke, 0.0{N/m3},0.0{N/m3},0.0{N/m3});
    SetHeatDeposited(is,js,ks, ie,je,ke, 0.0 {W/m3});
    {
    AddHeatPoint(0.0{x,m},0.0{y,m},0.0{z,m}, 0.1{radius,m}, 0.0{W});
    }
  );
);


Init(
  NavierStokesPerfect(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  P,  T     
    INIT_TYPE2                   M[1]..M[nd],  P,  T     
    INIT_TYPE3                   V[1]..V[nd],  P,  rho   
    _______________________________________________________________________________________
    }
    Mx=Minf;
    My=0;
    Mz=0;
    P=Pinf; {Pa}
    T=Tinf; {K}
    All(INIT_TYPE2,Mx,My,Mz,P,T);
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2, Mx,My,Mz,P,Twall);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2, Mx,My,Mz,P,T);
    Region(is,js,ks,  ie,je,ke,  INIT_TYPE2, Mx,My,Mz,P,T);
    }
  );
);


Disc(
  NavierStokesPerfect(
    zetaA1=0.1e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.3e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.9999;
    INTERPOL=INTERPOL_AOWENO7;
    FACEINTEG=FACEINTEG_CENTRAL1;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
    POSFILTER=POSFILTER_NONE;
    POSFILTER_numiter=4;
  );
  CDFplus(
    xi[1]=0.5;
    xi[2]=0.5;
    xi[3]=0.5;
    xi[4]=0.5;
    xi[5]=0.5;
  );
);


Cycle(
  NavierStokesPerfect(
    xiverge=1e-3;          {residual convergence threshold}
    rhoref=1.0;            {reference density in kg/m3}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref;   
    Uref[5]=rhoref*aref*aref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.3;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.1;
    );
    CFL=min(CFL*1.05,1.5);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,clipinfo);
  );
  DualTimeStepping(
    tmax=1e-4;    {simulation time span in seconds}
    dt=0.5*(1.5e-4/mf)/sqrt(1.4*286*Tinf);   {physical time step in seconds}
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.3;   {exponent of maximum pseudotime step in all fluxes}
    
    iterskip=round(1.0/(dt*freq));
    if (mod(round(time/dt),iterskip)==0,
      HEATADDED="ON";
      if (iter==1,
        CFL=0.1;
        Model(NavierStokesPerfect(SetHeatDeposited(HEAT_is,HEAT_js,HEAT_ks, HEAT_ie,HEAT_je,HEAT_ke, iterskip*poweradded/(HEAT_xe-HEAT_xs)/(HEAT_ye-HEAT_ys)/(HEAT_ze-HEAT_zs) {W/m3});););
      );
      maxiter=75;
    ,{else}
      HEATADDED="OFF";
      if (iter==1,
        CFL=1.0;
        Model(NavierStokesPerfect(SetHeatDeposited(HEAT_is,HEAT_js,HEAT_ks, HEAT_ie,HEAT_je,HEAT_ke, 0.0 {W/m3});););
      );
      maxiter=15;
    );

    CFL=min(CFL*1.25,1.5);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,dt);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld,%4ld)  %s  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,k_ximax,HEATADDED,clipinfo);
    if (ximax<xiverge || iter>maxiter,
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/dt));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/s\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  printf("\n");
  for (dim,1,3,
    Area[dim]=_Area(is,js,ks, ie,je,ke, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js,ks, ie,je,ke, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js,ks, ie,je,ke, dim,BDRY_WALLTFIXED1);
  );
  printf("Fshear    = (%+E,%+E,%+E) N\n",Fshear[1],Fshear[2],Fshear[3]);
  printf("Fpressure = (%+E,%+E,%+E) N\n",Fpressure[1],Fpressure[2],Fpressure[3]);
  printf("Qheat     = %+E W\n",_Qheat(is,js,ks, ie,je,ke, BDRY_WALLTFIXED1));
  printf("metotal   = %+E J\n",_metotal(is,js,ks, ie,je,ke));
  printf("m         = %+E J\n",_m(is,js,ks, ie,je,ke));
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js,ks, ie,je,ke, "post.01", "tecplot", POSTGRIDONLY);
  }
);
