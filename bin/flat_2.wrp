{
  Number of Dimensions    : nd           : 2

}

Mx=4;
My=0.0;
P=10000.0;
T=300.0;
Rgas=286.0;
rhoref=P/T/Rgas;
aref=sqrt(1.4*Rgas*T);
meshfact=0.5;
Hlayerinflow=0.0002/(P/Rgas/T)/(2.0*Mx);
Hlayeroutflow=0.0002/(P/Rgas/T);
H=0.1;
L=1.0;


Grid(
  is=1;  js=1; jm=round(60*meshfact);
  dwallinflow=Hlayerinflow/jm;
  dwalloutflow=Hlayeroutflow/jm;
  ie=round(80*meshfact); je=round(100*meshfact);
  Size(is,js, ie,je);
  Point(is,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is,je, 0.0e0,H);
  Point(ie,jm, L,Hlayeroutflow);
  Point(is,jm, 0.0e0,Hlayerinflow);
  JoinCorners(is,js, is,jm,  NO,0,0,0, EE,0.5e0,1.0e0,1.0e0);
  JoinCorners(ie,js, ie,jm,  NO,0,0,0, EE,0.5e0,1.0e0,1.0e0);
  Join(is,js,ie,jm, i, FE,0.28e0,dwallinflow*Mx*3,1.0e0);
  JoinCorners(is,jm, ie,je,  FE,0.28e0,dwallinflow*Mx*3,1.0e0,  GE,0.5e0,1.0,1.0e0);
);





Bdry(
  NavierStokesPerfect(
    {
    ******************************************************************
    * Fluid Flow Boundary Conditions Types:                           
    ******************************************************************
    *  0 : Inflow, supersonic                                         
    *  1 : Outflow, supersonic                                        
    *  2 : Slip wall, 1st order                                       
    *  3 : Slip wall, 2nd order                                       
    *  4 : Wall, T specified                                          
    *  5 : Wall, adiabatic                                            
    ******************************************************************
    }
    { first, create cuts in the computational domain; a cut is a region 
     which is not computed by the solver }
    { Cut(10{is},10{js},  17{ie},17{je});}
    { second, apply a default boundary condition (BC) type to all boundary nodes }
    All(3{BC type});
    { impose BC type at faces i=is, i=ie, j=js, j=je}
    Faces(0,1,  4,1);
    { apply BC type only to the boundary nodes in a specific region of the computational domain}
    { Region(10{is},10{js},  17{ie},17{je},  3{BC type});}
  );
);
 
 
Model(
 
  NavierStokesPerfect(
    gamma=1.4;    {the specific heat ratio }
    R=Rgas;    {the gas constant in J/kgK }
    eta=1.8e-5;    {the viscosity of the gas in kg/ms }
    kappa=0.026;     {the thermal conductivity of the gas in W/mK }
    Pmin=1.0e-2;    Pmax=9.9e99;   {min and max pressure allowed in the domain}
    Tmin=1.0e1;     Tmax=6.0e3;    {min and max temperature allowed in the domain}
    zetaA1=0.2e0; {conditions the convective waves of the A jacobian; set it to 0.0 usually but make
                   sure that the shock structure obtained is similar to when zetaA1 is set to 0.3}
    zetaA2=0.2;
    zetaA3=0.1; {conditions the eigenvalues of the inverted A jacobian (both acoustic and convective)}
    
    AXISYMMETRIC=FALSE;
    EIGENVALCOND=EIGENVALCOND_PECLET;
  );
);
 
 
Init(
    NavierStokesPerfect(
      {
      ************************************************************
      *Initial Conditions Types:                                  
      ************************************************************
      *1, v[0]..v[nd-1],  P,  T     
      *2, M[0]..M[nd-1],  P,  T     
      ************************************************************
      }
      { Init all nodes in the domain}
      All(2,Mx,My,P,T);
      {
        { Init bdry nodes numbered 3}
        Bdry(3, 1,0.0,0.0,0.0,0.0);
        { Init nodes in region}
        Region(3,3,  6,6,
         1,0.0,0.0,0.0,0.0);
      }
    );
);


Cycle(
  NavierStokesPerfect(
    xiverge=1e2;          {residual convergence threshold}
    aref=300.0;            {reference sound speed in m/s}
    Uref[1]=rhoref;            
    Uref[2]=rhoref*aref;       
    Uref[3]=rhoref*aref;   
    Uref[4]=rhoref*aref*aref;  
  );
  MultizoneSteady(
    if (mod(iter,50)==0,
      WriteDataFile();
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.01,1.5);
    phi1=20;     {maximum number of gridlines per zone in each dimension}
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2,phi1);

    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld) %3ld/%3ld%s \n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,numzones_updated,numzones_total,clipinfo);
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.0;      {exponent of largest pseudotime step in all flux components}
    PRECONDITIONER=PRECON_LOCALTIMESTEP;
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.01,1.5);
    UpdateFluid(CFL,PRECONDITIONER,sigma1,sigma2);
    { dtau=1e-7; {pseudotime step in seconds}
      UpdateFluidConstantPseudotimeStep(dtau); }
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );

);



Post(
  xcut[1]=0.1;
  xcut[2]=0.2;
  xcut[3]=0.3;
  {the following loop outputs to a file integrated properties at x=0.1,0.2,0.3}
  for (cnt,1,3,
    SetPostDomainToXcuts(xcut[cnt]);
    Pback=_Pback({Aback,m2}1.0, {Pback_min,Pa}400, {Pback_max,Pa}4000, {numsteps}300,
                 {q_min (as small a positive value as possible)}1.0);
    Fpot=_Fpot(Pback,{numsteps}300, {q_min}1.0);
    mdotreacting=_mdotreacting(
        2       {rank of the reacting species},
        0.235*(1-0.02876){stoichio. mass fraction of reacting species},
        1       {rank of the species reacted with},
        0.02876 {stoichio. mass fraction of species reacted with});
    Fx=_Fx();  {momentum*crossarea/mdot}
    mdot=_mdot();
    Tstag=_MassFluxAveStagTemperature();
    Pstag=_MassFluxAveStagPressure({numsteps} 300);
    Pave=_MassFluxAvePressure();
    Tave=_MassFluxAveTemperature();
    qave=_MassFluxAveSpeed();
    rhoave=_MassFluxAveDensity();
    totalenthalpy=_MassFluxAveTotalEnthalpy();
    fprintf("perfparam.txt",
            "x           =%E m\n"
            "Pback       =%E Pa\n"
            "Fpot        =%E Ns/kg\n"
            "mdotreacting=%E kg/s\n"
            "mdot        =%E kg/s\n"
            "Tstag       =%E K\n"
            "Pstag       =%E Pa\n"
            "Pave        =%E Pa\n"
            "Tave        =%E K\n"
            "qave        =%E m/s\n"
            "rhoave      =%E kg/m3\n\n"
            ,xcut[cnt],Pback,Fpot,mdotreacting,mdot,Tstag,Pstag,Pave,Tave,qave,rhoave);
  );
  {here, reset the post domain from one xcut to the entire computational domain}
  ResetPostDomain();
  {then, restrict the post domain to the region between is,js and ie,je}
  RestrictPostDomainToRegion(is,js, ie,je);
  {output the body forces in the post domain to a file (both shear and pressure)}
  WriteBodyForcesFile("bodyforces.txt",3 {node type on the surface of the body});
  {write a post file that includes only the post domain}
  WritePostFile("post.01", "tecplot",POSTFILE_ALL);
  {write a grid post file that includes only the post domain}
  WritePostFile("grid.01", "tecplot",POSTFILE_GRID);
);
