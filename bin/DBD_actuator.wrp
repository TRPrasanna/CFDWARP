 


mf=0.4; {0.8, 1.1, 1.5}
TSEMF_ITERATIVE=TRUE;

xs0=0.0;
xs1=0.013; {start of exposed electrode}
xs2=0.016; {end of exposed electrode}
xs3=0.018; {start of buried electrode}
xs4=0.021; {end of buried electrode}
xs5=0.06; {end of high resolution region}  
L=xs5;


Hdielectric=300e-6*5; {depth of buried electrode}
Hfluid=0.01; 
Hbdryexit=0.0011;
Hsheath=0.0007;
itermin=10;


 

freq=25000; {Hz} 
Vpp=50000;{V} 
timeperiod=1/freq;
timepulse=3e-6;
dtref_desired=1.3e-7/mf;
dtref=(timeperiod-timepulse)/round((timeperiod-timepulse)/dtref_desired);
dtref_pulse=min(dtref,timepulse/(20*mf*2));
dtref_extpulse=dtref;
timeextpulse=dtref_extpulse*1.01*mf/0.8;
DRYRUN=FALSE;


sigma_dielectric=1e-9;
sigma_conductor=100000;


tmax=1e99; {was 1e-5}  {simulation time span in seconds}
  

CFLmin_pulse=0.04; {was 0.04}
CFLmin_nopulse=0.1; {was 0.1}
CFLmax=1.0;
itermax_nopulse=30; {was 60} 
itermax_pulse=60*2; {was 150}
itermax_extpulse=150;
REACTING=YES;


subiter_tsemf_nophidiff=5; {was 10}
subiter_tsemf_phidiff=5; {was 5}

iter_tsemf_nophidiff=2; {was 1}
iter_tsemf_phidiff_ITERLT10=2; {was 12}
iter_tsemf_phidiff_ITERGE10=1; {was 4}



is0=1;
is1=is0+round(mf*50);
is2=is1+round(mf*24);
is3=is2+round((is2-is1)*(xs3-xs2)/(xs2-xs1));
is4=is3+round((is2-is1)*(xs4-xs3)/(xs2-xs1));
is5=is4+round(mf*190);

ie=is5;

dx=(xs5-xs4)/(is5-is4)/2;


js0=1;
js1=round(js0+12*mf);
js2=round(js1+12*mf);
js3=round(js2+30*mf);
js4=round(js3+20*mf);

is=is0;  js=js0; 
ie=is5; je=js4;


dy=Hsheath/(js3-js2)/3.0;
dyexit=Hbdryexit/(js3-js2)/3.0;



numtimelevelsskip_writedatafile=round(mf*4); {not yet operational -- should it be, will affect unsteady simulation only}

Grid(
  Size(is,js, ie,je);
  printf("%ldx%ld..",(ie-is+1),(je-js+1));

  {first electrode}
  Corners(is1,js1, is2,js2, xs1,-Hdielectric, xs2,0.0);
  JoinCorners(is1,js1, is2,js2,  EE,0.5e0,1.0,1.0,  EF,0.5e0,1.0e0,dy);

  {second electrode}
  Corners(is3,js1, is4,js2, xs3,-Hdielectric, xs4,0.0);
  JoinCorners(  is3,js1, is4,js2,  EE,0.5e0,1.0,1.0,  EF,0.5e0,1.0e0,dy);

  {from inflow to first electrode}
  Corners(is0,js1, is1,js2,  0.0,-Hdielectric, xs1,0.0);
  JoinCorners(  is0,js1, is1,js2,  fg,0.5e0,dx,1.0,  EF,0.5e0,1.0e0,dy);

  {in between electrodes}
  Corners(is2,js1, is3,js2, xs2,-Hdielectric, xs3,0.0);
  JoinCorners(is2,js1, is3,js2,  GG,0.5e0,1.0,1.0,  EF,0.5e0,1.0e0,dy);

  {after second electrode}
  Corners(is4,js1, is5,js2, xs4,-Hdielectric, xs5,0.0);
  JoinCorners(is4,js1, is5,js2,  GE,0.2e0,1.0,1.0,  EF,0.5e0,1.0e0,dy);

  {copy the row j=js2 on j=js3}
  Copy(is,js2, ie,js2, is,js3);
  {translate row j=js3 from y=0 to y=Hsheath}
  Translate(is,js3, ie,js3, 0.0,Hsheath);
  {Join row j=js2 to row j=js3}
  Join(is,js2, ie,js3, j, FE,0.25,dy,1.0); 

  {copy the row j=js2 on j=je}
  Copy(is,js2, ie,js2, is,je);
  {translate row j=je from y=0 to y=Hfluid}
  Translate(is,je, ie,je, 0.0,Hfluid);
  {Join row j=js3 to row j=je}
  Join(is,js3, ie,je, j, GE,0.8,1.0,1.0); 

  {copy the row j=js1 on j=js0}
  Copy(is,js1, ie,js1, is,js0);
  {translate row j=js0 from y= to y=Hfluid}
  Translate(is,js, ie,js, 0.0,-Hdielectric);
  {Join row j=js0 to row j=js1}
  Join(is,js0, ie,js1, j, EG, 0.5,1.0,1.0); 
  
  {make adjustment to grid at exit plane}
  Point(ie,js3, L,Hbdryexit);
  JoinCorners(ie,js2, ie,js3, NO,0.5,1,1, FE,0.25,dyexit,1.0);
  Join(ie,js3, ie,je, j, GE,0.8,1.0,1.0); 
  
  {join is4 and is5}
  Join(is4,js, is5,je, i, GE,0.3,1.0,1.0); 
   

  {make grid smooth before first electrode }
  Join(round(is1-0.5*(is1-is)),js,is1,je,i,GG,0.5e0,1.0,1.0);
  {make grid smooth in-between electrodes}
  Join(is2,js,is3,je,i,GG,0.5e0,1.0,1.0);
  {make grid smooth after second electrode}
  Join(is4,js,round(is4+(ie-is4)*0.2),je,i,GG,0.5e0,1.0,1.0);

);









Bdry(
  NavierStokesPlasma(
    {
    _________________________________________________________________________________________

    Boundary Condition Type            Number  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC              0       Inflow, supersonic, 1o
    BDRY_INFLOWSUBSONIC1               7       Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1  16      Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1            1       Outflow, supersonic, 1o
    BDRY_OUTFLOWSUPERSONIC2            2       Outflow, supersonic, 2o
    BDRY_OUTFLOWSUBSONIC1              4       Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1        15      Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                  14      Symmetrical, 2o
    BDRY_SYMMETRICAL1                  9       Symmetrical, 1o
    BDRY_WALLTFIXED1                    3       Wall, T specified
    BDRY_WALLADIABATIC1                 6       Wall, Adiabatic
    BDRY_SLIPWALL1                     12      Slip wall, Adiabatic, 1o
    _________________________________________________________________________________________
    }
    Cut(is,js,  ie,js2);
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_WALLTFIXED1,BDRY_OUTFLOWSUPERSONIC1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    }
  );
  Ohm(
    {
    _________________________________________________________________________________________

    EMField Bdry Condition Type   Number     Description
    _________________________________________________________________________________________

    BDRYEMF_ELECTRODE             0          Electrode, phi fixed
    BDRYEMF_DIELECTRIC            2          Dielectric, no conduction current through
    BDRYEMF_EXTRAPOLATED1         1          Extrapolated, similar to outflow
    _________________________________________________________________________________________

    }
    {Cut(round(is4+mf*60),js, ie,js2);}
      {here, the following three actions are performed to encase the power source within dielectrics 
       this is necessary to force the current to go in a specific direction}
      {WARNING: this can create problems when interpolating from fine to coarse mesh}
    Cut(is2,js1, is3,js1+2); 
    All(BDRYEMF_DIELECTRIC);

    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRYEMF_ELECTRODE);
    }
  );
);
 
 
Model(
  NavierStokesPlasma(
    TEMODEL=TEMODEL_LOCAL;    {set TEMODEL to TEMODEL_LOCAL, TEMODEL_TRANSPORT, or TEMODEL_CONSTANT}
    N2VIBMODEL=N2VIBMODEL_MACHERET;
    N2VIBJOULEHEATING=YES; {solve the nitrogen vibration energy joule heating source terms?}
    if (UNSTEADY,
      REACTING=YES;   {solve chemical reactions?}
    ,{else}
      REACTING=NO;
    );
    sigmadiv=1e-10; {minimum magnitude of sigma in S/m allowed when sigma appears on the denominator }
    etdiv=1e-1;     {minimum magnitude of et in J/kg allowed when et appears on the denominator}
    Pmin=2000;    Pmax=9.9e99;   {min and max pressure in Pa allowed in the domain}
    Tmin=130;     Tmax=6.0e3;    {min and max temperature in K allowed in the domain}
    Tvmin=Tmin;     Tvmax=10.0e3;  {min and max vibrational temperature in K allowed in the domain}
    Temin=Tmin;     Temax=60.0e3;  {min and max electron temperature in K allowed in the domain}
    Twmin=Tmin;     Twmax=Tmax;    {min and max wall temperature in K allowed on any wall boundary node}
    wmin=1.0e-50;                  {min mass fraction allowed in the domain for neutrals}
    wimin=1e-14;    wimax=1e-4;    {min and max ion mass fraction }
    wemin=1e-19;    wemax=1e-9;    {min and max electron mass fraction }
    Nminbdry=1e8;   {the minimum number density in 1/m3 for the charged species at the bdry nodes}
    gamma=0.1e0;    {secondary emission coefficient used to calculate the electron density at the cathode}
    AXISYMMETRIC=NO;
  );
  Ohm(
    Te_buffer=3000.0;    {"buffer" electron temp. in K needed when determining mue: Te=max(Te,T+Te_buffer);  
                       needed to prevent convergence hangs where |E| becomes close to 0;
                       set to as little a value as possible}
    Jmax=200000000.0;     {the maximum current density in A/m2 expected in the domain; this will affect only
                       the Townsend ionization rates; make sure Jmax > sigma*Emag in the converged solution.}
    SetRelativePermittivity(is,js, ie,je, 1.0 );
    SetRelativePermittivity(is,js, ie,js2, 6.0 ); {dielectric, diamond}

    SetSolidConductivity(is,js, ie,je, sigma_dielectric {S/m}); {dielectric}
    SetSolidConductivity(is1,js, is2,js2, sigma_conductor {S/m}); {electrode}
    SetSolidConductivity(is2,js, is4,js1, sigma_conductor {S/m}); {electrode}
    SetElectroMotiveForce(is,js, ie,je, 0.0{V/m},0.0{V/m}, 1e99{max power in W/m3});
  );
);


Init(
  NavierStokesPlasma(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns],     Tv, Te
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns],     Tv, Te
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns], Tv, Te
    _______________________________________________________________________________________

    }
    Vx=600; {m/s}
    Vy=0; {m/s}
    P=10000; {Pa}
    T=300; {K}
    Tv=T; {K}
    Te=3000; {K}
    chi_eminus=1e-14; {???}
    chi_O2minus=1.0e-30;
    chi_O2plus=1e-14; {???}
    chi_N2plus=1.0e-30;
    chi_O=1.0e-30;
    chi_N=1.0e-30;
    chi_O2=0.25;
    chi_N2=0.75;
    All(INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    Region(is,js,  ie,je, INIT_TYPE6,Vx,Vy,P,T,chi_eminus,chi_O2minus,chi_O2plus,chi_N2plus,chi_O,chi_N,chi_O2,chi_N2,Tv,Te);
    }
  );
  Ohm(
    {
    _______________________________________________________________________________________

    EMField Initial Condition Type         Parameters
    _______________________________________________________________________________________

    INITEMF_TYPE1                          phi
    _______________________________________________________________________________________

    }
    phi=0.0; {V}
    All(INITEMF_TYPE1,phi);
    {
    Bdry(BDRYEMF_ELECTRODE, INITEMF_TYPE1,phi);
    Region(is,js,ks,  ie,je,ke,INITEMF_TYPE1,phi);
    }
  );
);


Disc(
  NavierStokesPlasma(
    zetaA1=0.0e0;    {conditions the eigenvalue of the A jacobian}
    if (UNSTEADY,
      zetaA2=0.5;
    ,{else}
      zetaA2=0.1;
    );
    zetaD=1.0;        {conditions the Dstar eigenvalues for the charged species}
  );
  Ohm(
    Ediv=10.0;        {a small positive number in V/m, needed to prevent a division by zero when
                       discretizing the electron pressure gradients within the potential equation}
  );
  MUSCLplus(
    FLUX=FLUX_FDSplus;
    numiter=2;
    AVERAGING=AVERAGING_ARITH;
    AOWENO_TYPE=AOWENO_TYPE_COMPRESSIVE;
    AOWENO_gammalo=0.9;
    AOWENO_gammahi=0.9;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    EIGENVALCOND=EIGENVALCOND_PASCAL; 
  );
  FDSplus(
    AVERAGING=AVERAGING_ROE;
    ACCURACY=ACCURACY_SECONDORDER;
    numiter=2;
    xi=1.99;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
  );
  FVS(
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.85;
    AOWENO_gammahi=0.85;
    INTERPOL=INTERPOL_AOWENO5;
    EIGENVALCOND=EIGENVALCOND_GNOFFO;
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_AOWENO5;
     
    EIGENVALCOND=EIGENVALCOND_PARENT;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
  CDFplus(
    xi[1]=0.5;
    xi[2]=0.5;
    xi[3]=0.5;
    xi[4]=0.5;
    xi[5]=0.5;
    xi[6]=0.5;
    xi[7]=0.5;
    xi[8]=0.5;
    xi[9]=0.5;
    xi[10]=0.5;
    xi[11]=0.5;
    xi[12]=0.25;
    xi[13]=0.25;
  );
);


Cycle(
  NavierStokesPlasma(
    xiverge=1e2;         {residual convergence threshold}
    zetaGammai=1.0;{0.036*3/CFLmax}       {factor multiplying the pseudotime step of the ion species transport equations
                           when PRECONDITIONING is set to TRUE} 
    zetaGammae=1.0;{0.003}      {factor multiplying the pseudotime step of the electron species transport equations
                           near cathode when PRECONDITIONING is set to TRUE} 
    relaxNi_bdry=1.0; {the ion density relaxation factor at the boundary }
    relaxNe_bdry=0.1;    {the electron density relaxation factor at the boundary }
    relaxTe=0.2;      {the electron temperature relaxation factor }
    rhoref=0.1;           {reference density in kg/m3}
    Tref=300.0;           {reference temperature in K}
    Teref=20000.0;        {reference electron temperature in K}
    Tvref=5000.0;         {reference vibrational temperature in K}
    aref=sqrt(1.4*287*Tref);  {reference sound speed in m/s}
    wion=1e-7;            {average ion mass fraction}
    Uref[1]=wion*1.8e-5*rhoref;   
    Uref[2]=wion*rhoref;   
    Uref[3]=wion*rhoref;   
    Uref[4]=wion*rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref*aref;   
    Uref[10]=rhoref*aref;   
    Uref[11]=rhoref*aref*aref;  
    Uref[12]=rhoref*700.0*Tvref;  
    Uref[13]=rhoref*wion*414*Teref;  
  );
  Ohm(
    xiverge_emfield=1e2; {residual convergence threshold for the potential equation}
    sigmaref=0.0000001; {reference value for the conductivity in S/m -> used to determine the local time step of the potential equation}
    Uref_emfield[1]=100.0e0; {reference value for the electric field potential in Volts -> used to determine xi}
  );

  DualTimeStepping(
    sigma1=0.3;      {exponent of largest pseudotime step in all dimensions}
    sigma2=0.3;      {??? is set to 0.0 in 2DDBD.wrp.. exponent of largest pseudotime step in all flux components}

    period=1.0/freq;

    dt=dtref;
    timewithinperiod=time-period*floor(time/period);
    if(timewithinperiod<timepulse,
      dt=dtref_pulse;


      if (timewithinperiod+dt<0.5*timepulse,
        dphi=min(Vpp,(timewithinperiod+dt)/(0.5*timepulse)*Vpp);
      ,{else}
        dphi=max(0,Vpp-((timewithinperiod+dt)-0.5*timepulse)/(0.5*timepulse)*Vpp);
      );
      itermax=itermax_pulse+max(0,15*mf-15);
      subiter_tsemf=subiter_tsemf_phidiff;  {number of subiterations performed when inverting the matrix within tsemf}
      CFLmin=CFLmin_pulse;
      if (iter<8*mf,
        CFL=CFLmin;
        iter_tsemf=iter_tsemf_phidiff_ITERLT10;
      ,{else}
        iter_tsemf=iter_tsemf_phidiff_ITERGE10;
      );
    ,{else}
      if(timewithinperiod<timepulse+timeextpulse,
        dt=dtref_extpulse;
        dphi=0.0;
        itermax=itermax_extpulse;
        subiter_tsemf=subiter_tsemf_phidiff;  {number of subiterations performed when inverting the matrix within tsemf}
        CFLmin=CFLmin_pulse;
        if (iter<8*mf,
          CFL=CFLmin;
          iter_tsemf=iter_tsemf_phidiff_ITERLT10;
        ,{else}
          iter_tsemf=iter_tsemf_phidiff_ITERGE10;
        );
      ,{else}
        timewithinperiod_future=(time+dtref)-period*floor((time+dtref)/period);
        if (timewithinperiod_future<timewithinperiod,
          dt=dtref-timewithinperiod_future;
        ,{else}
          dt=dtref;
        );
        dphi=0.0;
        itermax=itermax_nopulse;
        subiter_tsemf=subiter_tsemf_nophidiff;  {number of subiterations performed when inverting the matrix within tsemf}
        iter_tsemf=iter_tsemf_nophidiff;
        CFLmin=CFLmin_nopulse;
      );
    );
    
    printf("%6.0f ",dphi);
    if (iter==1,
      CFL=CFLmin;
      Lc=3e-1;  {characteristic length scale used to solve the emfield equation}
    );
    CFL=max(CFLmin,min(CFL*1.2,CFLmax)); {was CFL*1.2}



    if(iter==1,
      Model(
        Ohm(

          SetElectroMotiveForce(is2,js0, is3,js1, dphi/(xs3-xs2){V/m},0.0{V/m}, 1e99{max power in W/m3});
          {it is necessary to do the following trick (setting the exposed electrode to a dielectric) when dphi is zero
           (otherwise, there are convergence issues)}
          {if (timewithinperiod<timepulse,
            SetSolidConductivity(is1,js, is2,js2, sigma_conductor {S/m}); {electrode}
          ,{else}
            SetSolidConductivity(is1,js, is2,js2, sigma_dielectric {S/m}); {electrode}
          );}

        );
      );
    );

    if (!DRYRUN,
      if (iter>5, UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2,dt););
      if (TSEMF_ITERATIVE,
        relaxEMF=1.0;
        Lc=10000;  
        UpdateEMField(Lc,relaxEMF,dt,TSEMF_SOR,1000);
        {UpdateEMField(Lc,relaxEMF,dt,TSEMF_IMAF,50);}
     ,{ else}
        relaxEMF=1.0;
        Lc=10000;  
        UpdateEMField(Lc,relaxEMF,dt,TSEMF_NEWTON);
     );
    );
    system("date");
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);

    if (iter>itermin && (iter>itermax || (ximax<xiverge && ximax_emfield<xiverge_emfield)),
      IncreaseTimeLevel();
      WriteDataFile(outputfilename"."round(time/min(dtref_pulse,dtref)));
      printf("dt=%E time=%Es\n",dt,time);
      if (time>tmax-0.1*dt,
        exit(EXIT_SUCCESS);
      );
    );
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.5;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.5;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.02,1.0);
    system("date");
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    Lc=3e-3;      {characteristic length scale in meters used to solve the emfield equation}
    relaxEMF=0.3; {relaxation factor forced on the update of the emfield variables}
    UpdateEMField(Lc,relaxEMF); {optional extra parameters:  scheme_tsemf [ADI, DDADI, etc; default: 0] and numsubiter_tsemf [default: 4] if supported}
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,ximax_emfield,i_ximax_emfield,j_ximax_emfield,clipinfo);
  );

);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2}
  for (cnt,1,3,
    XSTATION_Set(xstation[cnt]);
    Pback=XSTATION_Pback(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=XSTATION_Fpot(Pback, numsteps, qmin);
    mdot=XSTATION_mdot();
    Tstag=XSTATION_Tstag();
    Pstag=XSTATION_Pstag(numsteps);
    Pstar=XSTATION_Pstar();
    T=XSTATION_T();
    q=XSTATION_q();
    rho=XSTATION_rho();
    htstar=XSTATION_htstar();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/s\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  printf("\n");
  for (dim,1,3,
    Fshear[dim]=_Fshear(is,js,ks, ie,je,ke, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js,ks, ie,je,ke, dim,BDRY_WALLTFIXED1);
    Femfield[dim]=_Femfield(is,js,ks, ie,je,ke, dim);
  );
  printf("Fshear    = (%+E,%+E,%+E) N\n",Fshear[1],Fshear[2],Fshear[3]);
  printf("Fpressure = (%+E,%+E,%+E) N\n",Fpressure[1],Fpressure[2],Fpressure[3]);
  printf("Qheat     = %+E W\n",_Qheat(is,js,ks, ie,je,ke, BDRY_WALLTFIXED1));
  printf("Femfield  = (%+E,%+E,%+E) N\n",Femfield[1],Femfield[2],Femfield[3]);
  printf("Qbeam     = %+E W\n",_Qbeam(is,js,ks, ie,je,ke));
  printf("EdotJ     = %+E W\n",_EdotJ(is,js,ks, ie,je,ke));
  printf("Wemfield  = %+E W\n",_Wemfield(is,js,ks, ie,je,ke)); {Wemfield=Femfield dot Vn}
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js,ks, ie,je,ke, "post.01", "tecplot", POSTGRIDONLY);
  }
);
