{
  _______________________________________________________________________________________________

                                           C F D W A R P

                               A CFD Code for Plasma & Reactive Flow
  _______________________________________________________________________________________________

  Version                          19feb07a
  Compiler                         gcc 4.9.2 with OPENMP threads
  Compiled on                      Feb  7 2019 at 14:21:05 by parent on CLEO
  Cycle Strategy                   Standard
  Fluid Relaxation                 Block ADI [1,2]
  EM Field Relaxation              None
  Convection Discretization        Multidimensional MUSCL with flux FVS [3], FDS [5], and
                                   primitive interpolation TVD [4], WENO [7], CWENO [9], AOWENO
                                   [8], and eigenvalue conditioning HARTEN, GNOFFO [10], PECLET
                                   [11], PARENT [6], and PARENT positivity-preserving filter
                                   [12]
  Temporal Discretization          Steady-State
  Fluid Model                      Navier-Stokes Multispecies
  Thermodynamic Model              NASA Glenn Polynomials [13]
  Chemical Model                   Air Plasma 11s 31r Dunn-Kang [14]
  EM Field Model                   None
  Beam Model                       None
  Number of Dimensions             2
  Number of Flux Components        14
  Number of Species                11
  Number of Charged Species        6
  List of Species                  e-, O+, N+, O2+, N2+, NO+, O, N, NO, O2, N2
  _______________________________________________________________________________________________

  [1]  WR Briley and H McDonald. "On the Structure and Use of Linearized Block Implicit
       Schemes", Journal of Computational Physics 34:54-73, 1980.
  [2]  RM Beam and RF Warming. "An Implicit Finite-Difference Algorithm for Hyperbolic Systems
       in Conservation-Law-Form", Journal of Computational Physics 22:87-110, 1976.
  [3]  JL Steger and RF Warming. "Flux Vector Splitting of the Inviscid Gasdynamic Equations
       with Application to Finite-Difference Methods", Journal of Computational Physics 40:263-
       293, 1981.
  [4]  WK Anderson, JL Thomas, and B Van Leer. "Comparison of Finite Volume Flux Vector
       Splittings for the Euler Equations", AIAA Journal 24:1453-1460, 1986.
  [5]  PL Roe. "Approximate Riemann Solvers, Parameter Vectors, and Difference Schemes", Journal
       of Computational Physics 43:357-372, 1981.
  [6]  B Parent. "Positivity-Preserving Dual Time Stepping Schemes for Gas Dynamics", Journal of
       Computational Physics 361:391-411, 2018.
  [7]  G Jiang and CW Shu. "Efficient Implementation of Weighted ENO Schemes", Journal of
       Computational Physics 126:202-228, 1996.
  [8]  DS Balsara, S Garain, and CW Shu. "An Efficient Class of WENO schemes with Adaptive
       Order", Journal of Computational Physics 326:780-804, 2016.
  [9]  M Dumbser and M Kaser. "Arbitrary High Order Non-oscillatory Finite Volume Schemes on
       Unstructured Meshes for Linear Hyperbolic Systems", Journal of Computational Physics,
       221:693-723, 2007.
  [10] P Gnoffo and  JA White. "Computational Aerothermodynamic Simulation Issues on
       Unstructured Grids", 37th AIAA Thermophysics Conference, AIAA Paper 2004-2371, 2004.
  [11] B Parent. "Multidimensional High-Resolution Schemes for Viscous Hypersonic Flows", AIAA
       Journal, 55:141-152, 2017.
  [12] B Parent. "Making a Flux Positivity-Preserving: A General Purpose Filter for the Euler
       Equatons", AIAA Paper 2019-0906, AIAA Scitech, San Diego CA, 2019.
  [13] BJ McBride, MJ Zehe, and S Gordon. "NASA Glenn Coefficients for Calculating Thermodynamic
       Properties of Individual Species", NASA TP 2002-211556, 2002.
  [14] MG Dunn and SW Kang. "Theoretical and Experimental Studies of Reentry Plasmas", NASA CR-
       2232, 1973.


}

 

Mx=15.0;
My=0.0;
P=10000.0;
T=300.0;
Twall=1000.0;
Rgas=286.0;
rhoref=P/T/Rgas;
aref=sqrt(1.4*Rgas*T);
meshfact=0.8;
Hlayer=0.0007/(P/Rgas/T)/2;
H=0.1;
L=1.0;
Lbow=0.04;

  is=1;  js=1; jm=round(60*meshfact);
  is1=round(20*meshfact);
  ie=round(101*meshfact); je=round(101*meshfact);

Grid(
  dwall=Hlayer/jm;
  printf("Hlayer=%Em dwall=%Em\n",Hlayer,dwall);
  Size(is,js, ie,je);
  
  Point(is1,js, 0.0e0,0.0e0);
  Point(ie,js, L,0.0e0);
  Point(ie,je, L,H);
  Point(is1,je, 0.0e0,H);
  Point(ie,jm, L,Hlayer);
  Point(is1,jm, 0.0e0,Hlayer);
  JoinCorners(is1,js, ie,jm,  FE,0.28e0,dwall*Mx*3,1.0e0,  EE,0.5e0,1.0e0,1.0e0);  
  JoinCorners(is1,jm, ie,je,  FE,0.28e0,dwall*Mx*3,1.0e0,  GE,0.5e0,dwall,1.0e0);
  Copy(is1,js,is1,je, is,js);
  Translate(is,js,is,je, -Lbow,0.0);
  {JoinCorners(is,js,is,je, NO,1,1,1, EE,0.5,1,1);}
  Join(is,js,is1,je, i, EG,0.5,1.0,1.0);
);


Bdry(
  NavierStokes(
    {
    _________________________________________________________________________________________

    Boundary Condition Type           ID  Description
    _________________________________________________________________________________________

    BDRY_INFLOWSUPERSONIC             0   Inflow, supersonic
    BDRY_INFLOWSUBSONIC1              7   Inflow, subsonic, Tstag, Pstag fixed, 1o
    BDRY_INFLOWSUBSONICMASSFLOWFIXED1 g   Inflow, subsonic, Pstag, Massflow/Area fixed, 1o
    BDRY_OUTFLOWSUPERSONIC1           1   Outflow, supersonic, 1o
    BDRY_OUTFLOWSUBSONIC1             4   Outflow, subsonic, P fixed, 1o
    BDRY_OUTFLOWSUBSONICMFIXED1       f   Outflow, subsonic, M fixed, 1o
    BDRY_SYMMETRICAL2                 e   Symmetrical, 2o
    BDRY_SYMMETRICAL1                 9   Symmetrical, 1o
    BDRY_WALLTFIXED1                  3   Wall, T specified
    BDRY_WALLADIABATIC1               6   Wall, Adiabatic
    BDRY_SLIPWALL1                    c   Slip wall, Adiabatic, 1o
    BDRY_FREESTREAM1                  2   Freestream, 1o, params Vx,Vy, P, T
    _________________________________________________________________________________________
    }
    All(BDRY_WALLTFIXED1);
    Faces(BDRY_INFLOWSUPERSONIC,BDRY_OUTFLOWSUPERSONIC1,  BDRY_SYMMETRICAL1,BDRY_OUTFLOWSUPERSONIC1);
    Region(is1,js,  ie,js,  BDRY_WALLADIABATIC1);
    {
    Cut(is,js,  ie,je);
    Region(is,js,  ie,je,  BDRY_INFLOWSUPERSONIC);
    Link(i1,j1,  i2,j2);
    Param(is,js,  ie,je,  BDRY_FREESTREAM1, Vx,Vy,P,T);
    }
  );
);
 
 
Model(
  NavierStokes(
    DIFFUSION=YES;
    REACTING=YES;
    Pmin=1.0e-2;    Pmax=9.9e99;   {Pa}
    Tmin=1.0e1;     Tmax=15.0e3;    {K}
    Twmin=Tmin;     Twmax=Tmax;    {K}
    wmin=1.0e-50;
    AXISYMMETRIC=NO;
  );
);


Init(
  NavierStokes(
    {
    _______________________________________________________________________________________

    Initial Condition Type       Parameters
    _______________________________________________________________________________________

    INIT_TYPE1                   V[1]..V[nd],  T,  rho, w[1]..w[ns]
    INIT_TYPE2                   M[1]..M[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE3                   M[1]..M[nd],  Re, T,   w[1]..w[ns]
    INIT_TYPE4                   Mmag, angles, P,  T,   w[1]..w[ns]
    INIT_TYPE5                   V[1]..V[nd],  P,  T,   w[1]..w[ns]
    INIT_TYPE6                   V[1]..V[nd],  P,  T,   chi[1]..chi[ns]
    _______________________________________________________________________________________

    }
    w_eminus=1.0e-30;
    w_Oplus=1.0e-30;
    w_Nplus=1.0e-30;
    w_O2plus=1.0e-30;
    w_N2plus=1.0e-30;
    w_NOplus=1.0e-30;
    w_O=1.0e-30;
    w_N=1.0e-30;
    w_NO=1.0e-30;
    w_O2=0.235;
    w_N2=0.765;
    All(INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,Twall,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    {
    Bdry(BDRY_WALLTFIXED1, INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    Region(is,js,  ie,je, INIT_TYPE2,Mx,My,P,T,w_eminus,w_Oplus,w_Nplus,w_O2plus,w_N2plus,w_NOplus,w_O,w_N,w_NO,w_O2,w_N2);
    }
  );
);


Disc(
  NavierStokes(
    zetaA1=0.3e0;    {conditions the eigenvalue of the A jacobian}
    zetaA2=0.003e0;     {conditions eigenvalues so they don't go out of bound; set to 0.1-0.5}
  );
  MUSCL(
    FLUX=FLUX_FDS;
    AVERAGING=AVERAGING_ROE;
    AOWENO_TYPE=AOWENO_TYPE_DIFFUSIVE;
    AOWENO_gammalo=0.95;
    AOWENO_gammahi=0.95;
    INTERPOL=INTERPOL_TVD2_VANLEER;
    FACEINTEG=FACEINTEG_CENTRAL1;
    EIGENVALCOND=EIGENVALCOND_PASCAL;
    POSFILTER=POSFILTER_PARENT;
    POSFILTER_numiter=4;
  );
);


Cycle(
  NavierStokes(
    xiverge=1e-3;  {residual convergence threshold}
    rhoref=1.0;  {reference density in kg/m3}
    aref=300.0;  {reference sound speed in m/s}
    Uref[0]=rhoref;   
    Uref[1]=rhoref;   
    Uref[2]=rhoref;   
    Uref[3]=rhoref;   
    Uref[4]=rhoref;   
    Uref[5]=rhoref;   
    Uref[6]=rhoref;   
    Uref[7]=rhoref;   
    Uref[8]=rhoref;   
    Uref[9]=rhoref;   
    Uref[10]=rhoref;   
    Uref[11]=rhoref*aref;   
    Uref[12]=rhoref*aref;   
    Uref[13]=rhoref*aref*aref;  
  );
  SteadyState(
    if (mod(iter,50)==0,
      WriteDataFile(outputfilename);
    );
    sigma1=0.3;   {exponent of maximum pseudotime step in all dimensions}
    sigma2=0.3;   {exponent of maximum pseudotime step in all fluxes}
    if (iter==1,
      CFL=0.01;
    );
    CFL=min(CFL*1.05,1.3);
    UpdateFluid(CFL,PRECON_LOCALTIMESTEP,sigma1,sigma2);
    printf("%6.2f %6ld %9.3f   %E (%4ld,%4ld)  %s\n",
           CFL,iter,effiter_U,ximax,i_ximax,
           j_ximax,clipinfo);
  );
);


Post(
  xstation[1]=0.1; {m}
  xstation[2]=0.2; {m}
  xstation[3]=0.3; {m}
  numsteps=300;
  qmin=1.0; {m/s, as small a value as possible}
  Pback_min=400; {Pa}
  Pback_max=40000; {Pa}
  Aback=1.0; {m2/m}
  for (cnt,1,3,
    SetXstation(xstation[cnt]);
    Pback=_Pback_xstation(Aback, Pback_min, Pback_max, numsteps, qmin);
    Fpot=_Fpot_xstation(Pback, numsteps, qmin);
    mdot=_mdot_xstation();
    Tstag=_Tstag_xstation();
    Pstag=_Pstag_xstation(numsteps);
    Pstar=_Pstar_xstation();
    T=_T_xstation();
    q=_q_xstation();
    rho=_rho_xstation();
    htstar=_htstar_xstation();
    printf("x      = %E m\n"
           "Pback  = %E Pa\n"
           "Fpot   = %E Ns/kg\n"
           "mdot   = %E kg/ms\n"
           "htstar = %E J/kg\n"
           "Tstag  = %E K\n"
           "Pstag  = %E Pa\n"
           "Pstar  = %E Pa\n"
           "T      = %E K\n"
           "q      = %E m/s\n"
           "rho    = %E kg/m3\n\n"
           ,xstation[cnt],Pback,Fpot,mdot,htstar,Tstag,Pstag,Pstar,T,q,rho);
  );
  printf("\n");
  for (dim,1,2,
    Area[dim]=_Area(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fshear[dim]=_Fshear(is,js, ie,je, dim,BDRY_WALLTFIXED1);
    Fpressure[dim]=_Fpressure(is,js, ie,je, dim,BDRY_WALLTFIXED1);
  );
  printf("Fshear    = (%+E,%+E) N/m\n",Fshear[1],Fshear[2]);
  printf("Fpressure = (%+E,%+E) N/m\n",Fpressure[1],Fpressure[2]);
  printf("Qheat     = %+E W/m\n",_Qheat(is,js, ie,je, BDRY_WALLTFIXED1));
  printf("metotal   = %+E J/m\n",_metotal(is,js, ie,je));
  printf("m         = %+E J/m\n",_m(is,js, ie,je));
  printf("\n");
  {
  POSTGRIDONLY=FALSE;
  WritePostFile(is,js, ie,je, "post.01", "tecplot", POSTGRIDONLY);
  }
);
